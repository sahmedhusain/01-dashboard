# Import required fragments
#import "../fragments/user-fragments.graphql"
#import "../fragments/group-fragments.graphql"
#import "../fragments/result-fragments.graphql"
#import "../fragments/audit-fragments.graphql"
#import "../fragments/transaction-fragments.graphql"
#import "../fragments/object-fragments.graphql"
#import "../fragments/match-fragments.graphql"

# Advanced collaboration and skill analytics
query GetCollaborationAnalytics($userId: Int!) {
  user(where: { id: { _eq: $userId } }) {
    ...UserInfo

    # Group collaboration metrics
    groups {
      ...GroupUserInfo
      group {
        ...GroupInfo
        # Group performance metrics
        groupUsers {
          ...GroupUserInfo
          user {
            ...UserBasicInfo
            # Collaborator XP for team analysis
            collaboratorXP: transactions_aggregate(
              where: { type: { _eq: "xp" } }
            ) {
              aggregate {
                sum { amount }
              }
            }
          }
        }
        # Group results
        results: results_aggregate {
          ...ResultAggregateInfo
        }
        # Group audits
        audits: audits_aggregate {
          ...AuditAggregateInfo
        }
      }
    }

    # Groups as captain with team performance
    groupsByCaptainid {
      ...GroupInfo
      groupUsers {
        ...GroupUserInfo
        user {
          ...UserBasicInfo
          # Team member performance
          memberXP: transactions_aggregate(
            where: { type: { _eq: "xp" } }
          ) {
            aggregate {
              sum { amount }
              count
            }
          }
          memberProjects: results_aggregate(
            where: {
              object: { type: { _eq: "project" } }
              grade: { _gte: 1 }
              isLast: { _eq: true }
            }
          ) {
            aggregate {
              count
            }
          }
        }
      }
      # Team results
      teamResults: results_aggregate {
        ...ResultAggregateInfo
      }
    }

    # Audit relationships for network analysis
    audits {
      ...AuditInfo
      group {
        ...GroupInfo
        groupUsers {
          ...GroupUserInfo
          user {
            ...UserBasicInfo
          }
        }
      }
    }

    # Skill progression through transactions
    skillTransactions: transactions(
      where: {
        type: { _like: "%skill%" }
      }
      order_by: { createdAt: asc }
    ) {
      ...TransactionInfo
      object {
        ...ObjectInfo
        # Skill hierarchy
        children: objectChildrenByParentId {
          id
          key
          index
          child {
            ...ObjectInfo
          }
        }
      }
    }

    # Match/betting relationships for competitive analysis
    matches {
      ...MatchInfo
      matchedUser: userByMatchId {
        ...UserBasicInfo
        # Opponent performance for comparison
        opponentXP: transactions_aggregate(
          where: { type: { _eq: "xp" } }
        ) {
          aggregate {
            sum { amount }
          }
        }
      }
      object {
        ...ObjectInfo
      }
    }
  }
}
