# Import required fragments
#import "../fragments/user-fragments.graphql"
#import "../fragments/transaction-fragments.graphql"
#import "../fragments/progress-fragments.graphql"
#import "../fragments/result-fragments.graphql"
#import "../fragments/audit-fragments.graphql"
#import "../fragments/event-fragments.graphql"
#import "../fragments/group-fragments.graphql"
#import "../fragments/label-fragments.graphql"
#import "../fragments/match-fragments.graphql"
#import "../fragments/object-fragments.graphql"
#import "../fragments/registration-fragments.graphql"
#import "../fragments/role-fragments.graphql"
#import "../fragments/session-fragments.graphql"

# Comprehensive user analytics with all aggregate data
query GetComprehensiveUserAnalytics($userId: Int!, $campus: String = null) {
  user(where: { id: { _eq: $userId } }) {
    ...UserInfo

    # Direct metrics from user table
    auditRatio
    totalUp
    totalDown
    totalUpBonus
    auditsAssigned

    # All transaction aggregates
    transactions_aggregate {
      ...TransactionAggregateInfo
    }

    # XP transactions aggregate
    xpTransactions: transactions_aggregate(
      where: { type: { _eq: "xp" } }
    ) {
      ...TransactionAggregateInfo
    }

    # Up transactions aggregate
    upTransactions: transactions_aggregate(
      where: { type: { _eq: "up" } }
    ) {
      ...TransactionAggregateInfo
    }

    # Down transactions aggregate
    downTransactions: transactions_aggregate(
      where: { type: { _eq: "down" } }
    ) {
      ...TransactionAggregateInfo
    }

    # All progress aggregate
    progresses_aggregate {
      ...ProgressAggregateInfo
    }

    # Completed progress aggregate
    completedProgress: progresses_aggregate(
      where: { isDone: { _eq: true } }
    ) {
      ...ProgressAggregateInfo
    }

    # All results aggregate
    results_aggregate {
      ...ResultAggregateInfo
    }

    # Passed results aggregate
    passedResults: results_aggregate(
      where: { grade: { _gte: 1 } }
    ) {
      ...ResultAggregateInfo
    }

    # Project results aggregate
    projectResults: results_aggregate(
      where: {
        object: { type: { _eq: "project" } }
        isLast: { _eq: true }
      }
    ) {
      ...ResultAggregateInfo
    }

    # Audits given aggregate
    audits_aggregate {
      ...AuditAggregateInfo
    }

    # Events aggregate
    events_aggregate {
      ...EventUserAggregateInfo
    }

    # Groups aggregate
    groups_aggregate {
      ...GroupUserAggregateInfo
    }

    # Groups as captain aggregate
    groupsByCaptainid_aggregate {
      ...GroupAggregateInfo
    }

    # Labels aggregate
    labels_aggregate {
      ...LabelUserAggregateInfo
    }

    # Matches aggregate
    matches_aggregate {
      ...MatchAggregateInfo
    }

    # Object availabilities aggregate
    objectAvailabilities_aggregate {
      ...ObjectAvailabilityAggregateInfo
    }

    # Created objects aggregate
    objects_aggregate {
      ...ObjectAggregateInfo
    }

    # Progress by path aggregate
    progressesByPath_aggregate {
      ...ProgressByPathViewAggregateInfo
    }

    # Registrations aggregate
    registrations_aggregate {
      ...RegistrationUserAggregateInfo
    }

    # User roles aggregate
    user_roles_aggregate {
      ...UserRoleAggregateInfo
    }

    # Roles view aggregate
    roles_aggregate {
      ...UserRolesViewAggregateInfo
    }

    # Sessions aggregate
    sessions_aggregate {
      ...ToadSessionsAggregateInfo
    }
  }
}
