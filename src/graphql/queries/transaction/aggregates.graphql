# ============================================================================
# TRANSACTION AGGREGATE QUERIES
# Statistical and aggregate queries for transaction data
# ============================================================================

# Get total XP for a user
query GetUserTotalXP($userLogin: String!) {
  transaction_aggregate(
    where: {
      type: { _eq: "xp" }
      user: { login: { _eq: $userLogin } }
    }
  ) {
    aggregate {
      sum {
        amount
      }
      count
      avg {
        amount
      }
      max {
        amount
      }
      min {
        amount
      }
    }
  }
}

# Get user skill transaction summary (up/down)
query GetUserSkillSummary($userLogin: String!) {
  # Up transactions
  up_transactions: transaction_aggregate(
    where: {
      type: { _eq: "up" }
      user: { login: { _eq: $userLogin } }
    }
  ) {
    aggregate {
      sum {
        amount
      }
      count
    }
  }
  
  # Down transactions
  down_transactions: transaction_aggregate(
    where: {
      type: { _eq: "down" }
      user: { login: { _eq: $userLogin } }
    }
  ) {
    aggregate {
      sum {
        amount
      }
      count
    }
  }
}

# Get XP by project for a user
query GetUserXPByProject($userLogin: String!) {
  transaction(
    where: { 
      user: { login: { _eq: $userLogin } }
      type: { _eq: "xp" }
      path: { _regex: "^(?!.*(piscine|checkpoint|check-in|bh-onboarding)).*$" }
    }
    order_by: { amount: desc }
  ) {
    id
    amount
    createdAt
    path
    object {
      id
      name
      type
    }
    event {
      id
      path
      campus
    }
  }
}

# Get XP timeline for a user
query GetUserXPTimeline($userLogin: String!, $limit: Int = 100) {
  transaction(
    where: { 
      user: { login: { _eq: $userLogin } }
      type: { _eq: "xp" }
    }
    order_by: { createdAt: asc }
    limit: $limit
  ) {
    id
    amount
    createdAt
    path
    object {
      id
      name
      type
    }
  }
}

# Get skill timeline for a user (audit transactions)
query GetUserSkillTimeline($userLogin: String!, $limit: Int = 100) {
  transaction(
    where: { 
      user: { login: { _eq: $userLogin } }
      type: { _in: ["up", "down"] }
    }
    order_by: { createdAt: asc }
    limit: $limit
  ) {
    id
    type
    amount
    createdAt
    path
    object {
      id
      name
      type
    }
  }
}

# Get transaction statistics by type
query GetTransactionStatsByType($type: String!) {
  transaction_aggregate(where: { type: { _eq: $type } }) {
    aggregate {
      count
      sum {
        amount
      }
      avg {
        amount
      }
      max {
        amount
      }
      min {
        amount
      }
      stddev {
        amount
      }
    }
  }
}

# Get transaction statistics by campus
query GetTransactionStatsByCampus($campus: String!) {
  # XP transactions
  xp_stats: transaction_aggregate(
    where: { 
      campus: { _eq: $campus }
      type: { _eq: "xp" }
    }
  ) {
    aggregate {
      count
      sum {
        amount
      }
      avg {
        amount
      }
    }
  }
  
  # Up transactions
  up_stats: transaction_aggregate(
    where: { 
      campus: { _eq: $campus }
      type: { _eq: "up" }
    }
  ) {
    aggregate {
      count
      sum {
        amount
      }
      avg {
        amount
      }
    }
  }
  
  # Down transactions
  down_stats: transaction_aggregate(
    where: { 
      campus: { _eq: $campus }
      type: { _eq: "down" }
    }
  ) {
    aggregate {
      count
      sum {
        amount
      }
      avg {
        amount
      }
    }
  }
}

# Get top XP earners
query GetTopXPEarners($limit: Int = 50) {
  transaction(
    where: { type: { _eq: "xp" } }
    distinct_on: userId
  ) {
    user {
      id
      login
      firstName
      lastName
      campus
    }
  }
  
  # Aggregate XP by user
  user_xp_totals: transaction_aggregate(
    where: { type: { _eq: "xp" } }
  ) {
    nodes {
      user {
        id
        login
        firstName
        lastName
        campus
      }
      amount
    }
    aggregate {
      sum {
        amount
      }
    }
  }
}

# Get transaction volume by date
query GetTransactionVolumeByDate($startDate: timestamptz!, $endDate: timestamptz!) {
  transaction_aggregate(
    where: { 
      createdAt: { _gte: $startDate, _lte: $endDate }
    }
  ) {
    nodes {
      createdAt
      type
      amount
    }
    aggregate {
      count
      sum {
        amount
      }
    }
  }
}

# Get object performance by XP
query GetObjectPerformanceByXP($limit: Int = 50) {
  transaction(
    where: { type: { _eq: "xp" } }
    distinct_on: objectId
  ) {
    object {
      id
      name
      type
      attrs
    }
  }
  
  # Aggregate XP by object
  object_xp_totals: transaction_aggregate(
    where: { type: { _eq: "xp" } }
  ) {
    nodes {
      object {
        id
        name
        type
      }
      amount
    }
    aggregate {
      sum {
        amount
      }
      count
      avg {
        amount
      }
    }
  }
}

# Get user transaction comparison
query GetUserTransactionComparison($userLogins: [String!]!) {
  transaction_aggregate(
    where: { 
      user: { login: { _in: $userLogins } }
      type: { _eq: "xp" }
    }
  ) {
    nodes {
      user {
        login
        firstName
        lastName
      }
      amount
      createdAt
    }
    aggregate {
      sum {
        amount
      }
      count
      avg {
        amount
      }
    }
  }
}
