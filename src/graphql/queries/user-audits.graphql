# Import required fragments
#import "../fragments/audit-fragments.graphql"
#import "../fragments/user-fragments.graphql"
#import "../fragments/object-fragments.graphql"
#import "../fragments/result-fragments.graphql"
#import "../fragments/group-fragments.graphql"

# Enhanced user audits query following official database structure
query GetUserAudits($userId: Int!, $limit: Int = 50, $offset: Int = 0, $asAuditor: Boolean = null) {
  # Audits where user is the auditor following official audit table structure
  audits_given: audit(
    where: {
      auditorId: { _eq: $userId }
    }
    order_by: { createdAt: desc }
    limit: $limit
    offset: $offset
  ) {
    ...AuditInfo
    # Related group information following official structure
    group {
      id
      path
      status
      captainId
      createdAt
      updatedAt
      campus
      # Group users following official group_user table structure
      groupUsers {
        id
        confirmed
        createdAt
        updatedAt
        user {
          ...UserInfo
        }
      }
      # Captain information
      captain {
        ...UserInfo
      }
      # Related object
      object {
        ...ObjectInfo
        # Author information
        author {
          ...UserInfo
        }
      }
      # Related event
      event {
        id
        path
        campus
        createdAt
        endAt
      }
    }
    # Related result following official result table structure
    result {
      ...ResultInfo
      # Related object
      object {
        id
        name
        type
        attrs
      }
      # Related event
      event {
        id
        path
        campus
      }
      # Related group
      group {
        id
        status
        captainId
        path
      }
    }
    # Auditor information
    auditor {
      ...UserInfo
    }
  }

  # Audits received by user (through group membership) following official structure
  audits_received: audit(
    where: {
      group: {
        groupUsers: {
          userId: { _eq: $userId }
        }
      }
    }
    order_by: { createdAt: desc }
    limit: $limit
    offset: $offset
  ) {
    ...AuditInfo
    # Auditor information
    auditor {
      ...UserInfo
    }
    # Related group
    group {
      id
      path
      status
      captainId
      campus
      # Group users
      groupUsers {
        id
        confirmed
        user {
          ...UserInfo
        }
      }
    }
    # Related result
    result {
      ...ResultInfo
    }
  }

  # Audit statistics for audits given
  audit_stats_given: audit_aggregate(
    where: { auditorId: { _eq: $userId } }
  ) {
    aggregate {
      count
      avg {
        grade
      }
    }
  }

  # Audit statistics for audits received
  audit_stats_received: audit_aggregate(
    where: {
      group: {
        groupUsers: {
          userId: { _eq: $userId }
        }
      }
    }
  ) {
    aggregate {
      count
      avg {
        grade
      }
    }
  }
}
