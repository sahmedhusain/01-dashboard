# Import required fragments
#import "../fragments/user-fragments.graphql"
#import "../fragments/event-fragments.graphql"
#import "../fragments/object-fragments.graphql"
#import "../fragments/registration-fragments.graphql"
#import "../fragments/group-fragments.graphql"
#import "../fragments/label-fragments.graphql"
#import "../fragments/match-fragments.graphql"
#import "../fragments/progress-fragments.graphql"
#import "../fragments/record-fragments.graphql"
#import "../fragments/role-fragments.graphql"
#import "../fragments/session-fragments.graphql"
#import "../fragments/xp-fragments.graphql"

# Enhanced user profile with all relationships from introspection
query GetEnhancedUserProfile($userId: Int!) {
  user(where: { id: { _eq: $userId } }) {
    ...UserInfo

    # User events
    events {
      ...EventUserInfo
      event {
        ...EventInfo
        object {
          ...ObjectInfo
        }
        registration {
          ...RegistrationInfo
        }
      }
    }

    # User events aggregate
    events_aggregate {
      ...EventUserAggregateInfo
    }

    # User groups
    groups {
      ...GroupUserInfo
      group {
        ...GroupInfo
        captain {
          ...UserBasicInfo
        }
        object {
          ...ObjectInfo
        }
      }
    }

    # Groups where user is captain
    groupsByCaptainid {
      ...GroupInfo
      groupUsers {
        ...GroupUserInfo
        user {
          ...UserBasicInfo
        }
      }
      object {
        ...ObjectInfo
      }
    }

    # User labels
    labels {
      ...LabelUserInfo
      label {
        ...LabelInfo
      }
    }

    # User matches (betting system)
    matches {
      ...MatchInfo
      matchedUser: userByMatchId {
        ...UserBasicInfo
      }
      object {
        ...ObjectInfo
      }
      event {
        ...EventInfo
      }
    }

    # Object availabilities
    objectAvailabilities {
      ...ObjectAvailabilityInfo
      object {
        ...ObjectInfo
      }
    }

    # User objects (created by user)
    objects {
      ...ObjectInfo
      reference {
        ...ObjectInfo
      }
    }

    # Progress by path view
    progressesByPath {
      ...ProgressByPathViewInfo
    }

    # User records (bans, warnings)
    records {
      ...RecordInfo
      author {
        ...UserBasicInfo
      }
    }

    # Records authored by user
    recordsByAuthorid {
      ...RecordInfo
      user {
        ...UserBasicInfo
      }
    }

    # User registrations
    registrations {
      ...RegistrationUserInfo
      registration {
        ...RegistrationInfo
        object {
          ...ObjectInfo
        }
      }
    }

    # User roles
    user_roles {
      ...UserRoleInfo
      role {
        ...RoleInfo
      }
    }

    # User roles view
    roles {
      ...UserRolesViewInfo
    }

    # User sessions
    sessions {
      ...ToadSessionInfo
    }

    # User XPs
    xps {
      ...XPInfo
    }
  }
}
