# Import required fragments
#import "../fragments/transaction-fragments.graphql"
#import "../fragments/object-fragments.graphql"
#import "../fragments/user-fragments.graphql"

# Optimized user transactions query following official database structure
query GetUserTransactions(
  $userId: Int!
  $limit: Int = 100
  $offset: Int = 0
  $transactionTypes: [String!] = ["xp", "up", "down"]
  $campus: String = null
) {
  transaction(
    where: {
      userId: { _eq: $userId }
      type: { _in: $transactionTypes }
      campus: { _eq: $campus }
    }
    order_by: { createdAt: desc }
    limit: $limit
    offset: $offset
  ) {
    ...TransactionInfo
    # Related object information following official structure
    object {
      ...ObjectInfo
      # Author information
      author {
        ...UserInfo
      }
      # Reference relationships
      reference {
        id
        name
        type
        attrs
      }
    }
    # Related event information following official structure
    event {
      id
      path
      campus
      createdAt
      endAt
      # Parent event relationship
      parent {
        id
        path
        campus
      }
      # Registration information
      registration {
        id
        startAt
        endAt
        eventStartAt
      }
      # Related object
      object {
        id
        name
        type
        attrs
      }
    }
  }

  # Transaction aggregates for statistics
  transaction_aggregate(
    where: {
      userId: { _eq: $userId }
      type: { _in: $transactionTypes }
      campus: { _eq: $campus }
    }
  ) {
    aggregate {
      count
      sum {
        amount
      }
      avg {
        amount
      }
      max {
        amount
      }
      min {
        amount
      }
    }
  }
}
