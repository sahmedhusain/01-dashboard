# ============================================================================
# USER RELATIONSHIP QUERIES
# Queries for user relationships with other entities
# ============================================================================

# Get user with their groups
query GetUserWithGroups($userLogin: String!) {
  user(where: { login: { _eq: $userLogin } }) {
    id
    login
    firstName
    lastName
    campus
    # Groups the user is part of
    group_users {
      confirmed
      createdAt
      group {
        id
        status
        path
        campus
        createdAt
        updatedAt
        # Group captain
        captain {
          id
          login
          firstName
          lastName
        }
        # Object/project the group is working on
        object {
          id
          name
          type
          attrs
        }
        # Event the group is part of
        event {
          id
          path
          campus
          createdAt
          endAt
        }
      }
    }
  }
}

# Get user with their events
query GetUserWithEvents($userLogin: String!) {
  user(where: { login: { _eq: $userLogin } }) {
    id
    login
    firstName
    lastName
    campus
    # Events the user is registered for
    event_users {
      createdAt
      event {
        id
        path
        campus
        createdAt
        endAt
        status
        # Object/activity for the event
        object {
          id
          name
          type
          attrs
        }
        # Registration details
        registration {
          id
          startAt
          endAt
          eventStartAt
        }
      }
    }
  }
}

# Get user with their registrations
query GetUserWithRegistrations($userLogin: String!) {
  user(where: { login: { _eq: $userLogin } }) {
    id
    login
    firstName
    lastName
    campus
    # User registrations
    registration_users {
      createdAt
      registration {
        id
        startAt
        endAt
        eventStartAt
        path
        campus
        # Object being registered for
        object {
          id
          name
          type
          attrs
        }
        # Parent object
        parent {
          id
          name
          type
        }
      }
    }
  }
}

# Get user with their roles
query GetUserWithRoles($userLogin: String!) {
  user(where: { login: { _eq: $userLogin } }) {
    id
    login
    firstName
    lastName
    campus
    # User roles
    user_roles {
      role {
        id
        slug
        name
        description
        createdAt
        updatedAt
      }
    }
  }
}

# Get user with audit relationships (as auditor)
query GetUserAsAuditor($userLogin: String!) {
  user(where: { login: { _eq: $userLogin } }) {
    id
    login
    firstName
    lastName
    campus
    # Audits performed by this user
    audits_as_auditor: audits(where: { auditor: { login: { _eq: $userLogin } } }) {
      id
      grade
      createdAt
      updatedAt
      attrs
      # Group being audited
      group {
        id
        status
        path
        campus
        # Group members
        group_users {
          user {
            id
            login
            firstName
            lastName
          }
        }
      }
    }
  }
}

# Get user with match relationships
query GetUserWithMatches($userLogin: String!) {
  user(where: { login: { _eq: $userLogin } }) {
    id
    login
    firstName
    lastName
    campus
    # Matches initiated by user
    matches_initiated: matches(where: { user: { login: { _eq: $userLogin } } }) {
      id
      confirmed
      bet
      result
      createdAt
      updatedAt
      # Matched user
      matched_user: user_by_match {
        id
        login
        firstName
        lastName
      }
      # Object/exercise being matched on
      object {
        id
        name
        type
        attrs
      }
      # Event context
      event {
        id
        path
        campus
      }
    }
    # Matches where user is the matched party
    matches_received: matches(where: { match: { login: { _eq: $userLogin } } }) {
      id
      confirmed
      bet
      result
      createdAt
      updatedAt
      # User who initiated the match
      initiator: user {
        id
        login
        firstName
        lastName
      }
      # Object/exercise being matched on
      object {
        id
        name
        type
        attrs
      }
      # Event context
      event {
        id
        path
        campus
      }
    }
  }
}

# Get user with records (bans/disciplinary actions)
query GetUserWithRecords($userLogin: String!) {
  user(where: { login: { _eq: $userLogin } }) {
    id
    login
    firstName
    lastName
    campus
    # Records against this user
    records_as_subject: records(where: { user: { login: { _eq: $userLogin } } }) {
      id
      message
      banEndAt
      createdAt
      # Author of the record
      author {
        id
        login
        firstName
        lastName
      }
    }
    # Records created by this user (if they have authority)
    records_as_author: records(where: { author: { login: { _eq: $userLogin } } }) {
      id
      message
      banEndAt
      createdAt
      # Subject of the record
      user {
        id
        login
        firstName
        lastName
      }
    }
  }
}
